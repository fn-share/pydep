#!/usr/bin/env python3
#
# python depends package synchronizing tool
# author: wayne chan
# 2020/04/09

import os, sys, stat, json

base_dir = os.path.dirname(os.path.abspath(__file__))
exclude_files = [ '.pyc','.pyo' ]

def syncOneModule(item, by_force):
  sour0 = item['source']
  sour = os.path.join(base_dir,sour0)
  targ = os.path.join(base_dir,item['target'])
  files = item.get('files',None)      # None or ['file', ...]
  excepts = item.get('excepts',[])
  opt = item.get('option','confirm')  # default is 'confirm'
  
  os.makedirs(targ,exist_ok=True)
  
  succ = 0; failed = 0
  check_copied = None if files is None else files[:]
  b = os.listdir(sour)
  
  for s in b:
    if s[:1] == '.': continue  # ignore .DS_Store .gitignore ...
    
    is_exclude = False
    for one in exclude_files:
      if one[:1] == '.':
        if s[-len(one):] == one:
          is_exclude = True
          break
      else:
        if s == one:
          is_exclude = True
          break
    if is_exclude: continue
    
    srcFile = os.path.join(sour,s)
    if not os.path.isfile(srcFile): continue
    if s in excepts or not (files is None or s in files): continue
    
    srcFile0 = os.path.join(sour0,s)
    if check_copied and s in check_copied:
      check_copied.remove(s)      # processing awared
    
    st_sour = os.stat(srcFile)
    tarFile = os.path.join(targ,s)
    need_copy = False; set_readonly = True
    
    if opt == 'force' or by_force:
      need_copy = True
      if os.path.isdir(tarFile):
        print('! warning: target (%s) is directory, not a file' % tarFile)
    else:
      st_targ = None
      if os.path.isfile(tarFile):
        st_targ = os.stat(tarFile)
      elif os.path.isdir(tarFile):
        print('! warning: target (%s) is directory, not a file' % tarFile)
        continue
      
      if not st_targ:
        need_copy = True
      else:
        if opt == 'newest':
          if st_sour.st_mtime > st_targ.st_mtime:
            need_copy = True
            set_readonly = False
        else:  # 'confirm'
          if st_sour.st_size == st_targ.st_size and st_sour.st_mtime == st_targ.st_mtime:
            pass
          elif st_sour.st_mtime > st_targ.st_mtime:
            need_copy = True
          else:
            answer = input('source file (%s) is older than target, overwrite target? (Y/N)' % srcFile)
            if answer == 'y' or answer == 'Y':
              need_copy = True
    
    if not need_copy: continue
    
    try:
      with open(srcFile,'rb') as f1:
        try:
          with open(tarFile,'wb') as f2:
            f2.write(f1.read())
        except PermissionError:
          os.chmod(tarFile,stat.S_IREAD | stat.S_IWRITE)
          with open(tarFile,'wb') as f2:
            f2.write(f1.read())
      
      try:
        os.utime(tarFile,(st_sour.st_atime,st_sour.st_mtime))
        if set_readonly: os.chmod(tarFile,stat.S_IREAD)
      except:
        print('! warning: chmod failed (target=%s)' % tarFile)
        raise
      
      print('  file copied from: %s' % srcFile0)
      succ += 1
    except:
      print('! warning: copy source file (%s) failed' % srcFile0)
      failed += 1
  
  if check_copied:
    print('! warning: some file (%s) absent' % ','.join(check_copied))
  return (succ,failed)

def process(modules, by_force):
  cfg_file = os.path.join(base_dir,'pydepends.json')
  if not os.path.isfile(cfg_file):
    print('! warning: can not find pydepends.json\n')
    return
  
  succ = 0; failed = 0
  
  with open(cfg_file,'rt') as f:
    tail_str = '-0123456789'
    cfg = json.loads(f.read())
    for item in cfg:
      if modules is None or item['module'].rstrip(tail_str) in modules:
        info = syncOneModule(item,by_force)
        succ += info[0]; failed += info[1]
  
  if failed == 0:
    print('... module synchronizing success, total=%i\n' % succ)
  else:
    print('... module synchronizing finished, success=%i, failed=%i\n' % (succ,failed))

if __name__ == '__main__':
  # pydepends.json: 
  #   [ { "module":"...", "source":"...", "target":"...",
  #     "files":null or [...],
  #     "option":"confirm/force/newest",
  #     "excepts":[] }, ...
  #   ]
  
  argv = sys.argv[1:]
  if '--help' in argv:
    print('Usage: python pydep.py [--help] [--force] [module1 [module2...]]\n')
  
  else:
    by_force = '--force' in argv
    if by_force: argv.remove('--force')
    if argv:
      print('synchronize module (%s) ...' % ','.join(argv))
    else: print('synchronize all module ...')
    process(argv or None,by_force)  # modules=None means sync all
